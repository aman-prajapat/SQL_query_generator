user_query,schema,sql_query,expected_sql
Get all customer details.,"customers (id INT, name TEXT, email TEXT, phone TEXT, address TEXT)",SELECT * FROM customers;,SELECT * FROM customers;
Retrieve all employees from the database.,"employees (id INT, name TEXT, department TEXT, salary FLOAT, joining_date DATE)",SELECT * FROM employees;,SELECT * FROM employees;
Show all products available in the inventory.,"products (id INT, name TEXT, price FLOAT, stock INT, category TEXT)",SELECT * FROM products WHERE stock > 0;,SELECT * FROM products WHERE stock > 0;
List all orders placed today.,"orders (id INT, customer_id INT, total_amount FLOAT, order_date DATE)",SELECT *  FROM orders  WHERE order_date = CURRENT_DATE;,SELECT * FROM orders WHERE order_date = CURRENT_DATE;
Find all students enrolled in the school.,"students (id INT, name TEXT, class TEXT, admission_date DATE)",SELECT * FROM students;,SELECT * FROM students;
Find all employees who work in the IT department.,"employees (id INT, name TEXT, department TEXT, salary FLOAT)",SELECT * FROM employees WHERE department = 'IT';,SELECT * FROM employees WHERE department = 'IT';
Get a list of students who scored above 90% in Math.,"marks (student_id INT, subject TEXT, score INT)",SELECT student_id  FROM marks  WHERE subject = 'Math' AND score > 90;,SELECT student_id FROM marks WHERE subject = 'Math' AND score > 90;
Show the top 10 highest-paid employees.,"employees (id INT, name TEXT, department TEXT, salary FLOAT)","SELECT name, salary  FROM employees  ORDER BY salary DESC  LIMIT 10;",SELECT * FROM employees ORDER BY salary DESC LIMIT 10;
Count the number of employees in each department.,"employees (id INT, name TEXT, department TEXT)","SELECT department, COUNT(id)  FROM employees  GROUP BY department;","SELECT department, COUNT(*) FROM employees GROUP BY department;"
Retrieve employee names and their respective department names.,"employees (id INT, name TEXT, department_id INT), departments (id INT, name TEXT)","SELECT e.name, d.name  FROM employees e  JOIN departments d  ON e.department_id = d.id;","SELECT employees.name, departments.name FROM employees JOIN departments ON employees.department_id = departments.id;"
Find the total revenue generated by each product category.,"orders (id INT, product_id INT, quantity INT, total_price FLOAT), products (id INT, name TEXT, category TEXT)","SELECT      p.category,      SUM(o.total_price) AS total_revenue FROM      orders o JOIN      products p ON o.product_id = p.id GROUP BY      p.category","SELECT products.category, SUM(orders.total_price) FROM orders JOIN products ON orders.product_id = products.id GROUP BY products.category;"
Find all users who registered in the last 30 days.,"users (id INT, name TEXT, email TEXT, registration_date DATE)",SELECT *  FROM users  WHERE registration_date >= CURRENT_DATE - INTERVAL 30 DAY;,SELECT * FROM users WHERE registration_date >= CURRENT_DATE - INTERVAL '30 days';
Search for books with 'Data Science' in the title.,"books (id INT, title TEXT, author TEXT, published_year INT)",SELECT * FROM books WHERE title LIKE '%Data Science%';,SELECT * FROM books WHERE title LIKE '%Data Science%';
Show all orders with a total amount between $1000 and $5000.,"orders (id INT, customer_id INT, total_amount FLOAT, order_date DATE)",SELECT *  FROM orders  WHERE total_amount BETWEEN 1000 AND 5000;,SELECT * FROM orders WHERE total_amount BETWEEN 1000 AND 5000;
Update the salary of employees in the IT department by 10%.,"employees (id INT, name TEXT, department TEXT, salary FLOAT)",UPDATE employees  SET salary = salary * 1.10  WHERE department = 'IT';,UPDATE employees SET salary = salary * 1.10 WHERE department = 'IT';
Delete all inactive users who havenâ€™t logged in for a year.,"users (id INT, name TEXT, last_login DATE)",DELETE FROM users  WHERE last_login < (CURRENT_DATE - INTERVAL 1 YEAR);,DELETE FROM users WHERE last_login < CURRENT_DATE - INTERVAL '1 year';
